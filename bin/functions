[ -z "$tmpDir" ]          && tmpDir=/var/lib/rpi-sous-vide/tmp
[ -z "$temperatureFile" ] && temperatureFile="$tmpDir/temperature"
[ -z "$setpointFile" ]    && setpointFile="$tmpDir/setpoint"
[ -z "$heaterDutyFile" ]  && heaterDutyFile="$tmpDir/heaterDuty"

[ ! -f "$temperatureFile" ]  && { echo 0 > $temperatureFile ; sudo /bin/chown pi:pi $temperatureFile ; }
[ ! -f "$heaterDutyFile" ]   && { echo 0 > $heaterDutyFile ; sudo /bin/chown pi:pi $heaterDutyFile ; }
[ ! -f "$setpointFile" ]     && { echo 0 > $setpointFile ; sudo /bin/chown pi:pi $setpointFile ; }

function logData(){
  for logScript in $this_dir/logging-enabled/*
  do
    $logScript $1 $2
  done
}

function initRelays(){
  local pin=""

  for pin in $gpioPins
  do
    echo $pin | sudo tee /sys/class/gpio/export
    echo out | sudo tee /sys/class/gpio/gpio${pin}/direction
  done
}

function gitPull(){
  cd $this_dir/..
  git pull
}

function getW1DevicePath(){
  [ -z "$1" ] && local curDevice=$(ls /sys/bus/w1/devices | grep "^2" | head -1)
  echo "/sys/bus/w1/devices/$curDevice"
}

function getW1DevicePathByAlias(){
  if [ -n "$1" ]
  then
    [ ! -f $this_dir/../conf/aliases.conf ] && { echo $(basename $curDevice) ; return 0 ; }
    curAlias=$(grep ";${1}$" $this_dir/../conf/aliases.conf | awk -F";" '{print $1}')
    echo $curAlias
  fi
}

function getW1DevicePaths(){
  ls /sys/bus/w1/devices | grep "^2" | xargs -L1 -IX echo /sys/bus/w1/devices/X
}

function getW1Temperature(){
  local devicePath=$1
  [ -z "$devicePath" ] && devicePath=$(getW1DevicePath)
  cat $devicePath/w1_slave | awk '$NF~/t=/ { gsub(".*=","", $NF); temperature=$NF/1000; printf "%.2f", temperature;}'
}

function getAlias(){
  local curDevice=$1
  local curAlias

  [ -z "$1" ] && return 0

  [ ! -f $this_dir/../conf/aliases.conf ] && { echo $(basename $curDevice) ; return 0 ; }
  curAlias=$(grep "^$1" $this_dir/../conf/aliases.conf | awk -F";" '{print $NF}')
  [ -z "$curAlias" ] && curAlias=$(basename $curDevice)
  echo $curAlias
  return 0
}

function getTemperatures(){
  local devicePath

  for devicePath in $(getW1DevicePaths)
  do
    getW1Temperature $devicePath | xargs -L1 -IX echo $devicePath: X
  done
}

function setPump(){
  case $1 in
    on)
      echo 1 | sudo tee /sys/class/gpio/gpio${pumpPin}/value
    ;;
    off)
      echo 0 | sudo tee /sys/class/gpio/gpio${pumpPin}/value
    ;;
    *)
    ;;
  esac
}

function getPumpStatus(){
  local ret=$(cat /sys/class/gpio/gpio${pumpPin}/value)
  case $ret in
    0)
      echo "off"
      ;;
    1)
      echo "on"
      ;;
    *)
      echo "unknown"
      ;;
  esac

  return $ret
}

function getHeaterStatus(){
  local ret=$(cat /sys/class/gpio/gpio${heaterPin}/value)
  case $ret in
    0)
      echo "off"
      ;;
    1)
      echo "on"
      ;;
    *)
      echo "unknown"
      ;;
  esac

  return $ret
}

function setHeater(){
  case $1 in
    on)
      echo 1 | sudo tee /sys/class/gpio/gpio${heaterPin}/value
    ;;
    off)
      echo 0 | sudo tee /sys/class/gpio/gpio${heaterPin}/value
    ;;
    *)
    ;;
  esac
}

function getSetpointFromFile(){
  [ -f ${setpointFile} ] && { cat $setpointFile | awk '{printf "%i", $NF}' ; return 0 ; }
  echo -n 0
}

function getTemperatureFromFile(){
  [ -f ${temperatureFile} ] && { cat $temperatureFile | awk '{printf "%s", $NF}' ; return 0 ; }
  echo -n 0
}

function getTemperatureByAliasFromFile(){
  local alias=$1
  echo $alias >> /tmp/bapp.txt
  [ -f ${temperatureFile}.${alias} ] && { cat ${temperatureFile}.${alias} | awk '{printf "%s", $NF}' ; return 0 ; }
  echo -n 0
}

function setTemperatureToFile(){
  local TS=$(date "+%Y%m%d_%H%M%S %s")
  [ -n "$2" ] && { echo $1 > ${temperatureFile}.$2 ; return 0 ; }
  echo $1 > ${temperatureFile}
}

function setHeaterDuty(){
  #--- remove decimal points
  local curOutput=$(printf "%.0f" $1)
  echo "$curOutput" > $heaterDutyFile
}

function setOutput(){
  setHeaterDuty $1
}

function getHeaterDuty(){
  [ -f ${heaterDutyFile} ] && { cat ${heaterDutyFile} | awk '{printf "%s", $NF}' ; return 0 ; }
  echo -n 0
}

function setSetpoint(){
  logData smoker-setpoint $1
  echo $1 > $setpointFile
}

function isInputRunning(){
  if [ $(ps -ef | grep "SCREEN" | grep input | wc -l) -gt 0 ]
  then
    echo -n 0
    return 0
  else
    echo -n 1
    return 1
  fi
}

function isControlRunning(){
  if [ $(ps -ef | grep "SCREEN" | grep control | wc -l) -gt 0 ]
  then
    echo -n 0
    return 0
  else
    echo -n 1
    return 1
  fi
}

function isOutputRunning(){
  if [ $(ps -ef | grep "SCREEN" | grep output | wc -l) -gt 0 ]
  then
    echo -n 0
    return 0
  else
    echo -n 1
    return 1
  fi
}

function getProcessId(){
  local process="$1"
  local pid=$(ps -ef | grep -E "[S]CREEN.*${process}$" | awk '{print $2}')
  echo $pid
  return 0
}

function getProcessIds(){
  local processes="input input-mcp3208-wrapper control output"
  for process in $processes
  do
    getProcessId $process
  done
  return 0
}



function killProcesses(){
  for processId in $(getProcessIds)
  do
    #kill -9 $processId 
    screen -X -S $processId quit
  done
  setHeater off
}

function startProcesses(){
  $this_dir/startup.sh
}

function genAliasFile(){
  if [ $(ls /sys/bus/w1/devices/28* 2>/dev/null | wc -l) -gt 0 ]
  then
    $this_dir/genAliases > $this_dir/../conf/aliases.conf 
  fi
}


function getPluginInfo(){
  local type=$1
  local pluginName=$2
  $this_dir/${type}-available/${pluginName} --info
}

function killCronJobs(){
  ps -ef | grep [X]XX_RPI_SOUS_VIDE_XXX | awk '{print $2}' | xargs -L1 -IX kill X
  return 0 
}

function cronEnable(){
  local interval="$1"
  (crontab -l | grep -v "XXX_RPI_SOUS_VIDE_XXX"; $this_dir/wrapper genCrontab ) | crontab  - 
}

function cronDisable(){
  local interval="$1"
  (crontab -l | grep -v "XXX_RPI_SOUS_VIDE_XXX" ) | crontab  - 
  killCronJobs
}

function getCrontab(){
  crontab -l | grep -vE "^# [^X]|^# $"
}

function genCrontab(){
  local interval=$1
  [ -z "$interval"] && interval=0

  [ $interval -gt 3600 ] && return 1

  cat $this_dir/../conf/crontab.template | sed -e 's/XXX_DIVIDER_XXX/1/g' -e 's/XXX_SLEEP_TIME_XXX/'$sleepTime'/g'
}

