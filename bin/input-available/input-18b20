#!/bin/bash

this_dir=$(cd $(dirname $0);pwd)
this_script=$(basename $0)

. $this_dir/../conf/app.conf
. $this_dir/functions

#=====================================
# Functions
#=====================================
function doSetup(){

  #=============================================
  # This function will set up the 1wire requirements
  # when called
  #=============================================
  local rebootRequired=""

  #--- /boot/config.txt
  echo "* Checking /boot/config.txt"
  [ -z "$(grep -v "^#" /boot/config.txt | grep "dtoverlay=w1-gpio")" ] && {
    echo "  - Adding config to /boot/config.txt"
    echo "dtoverlay=w1-gpio" | sudo tee -a /boot/config.txt
    echo "  - Reboot required!"
    rebootRequired=true
  }

  #--- /boot/config.txt
  local module=""
  local modules="w1-gpio w1-therm"

  echo "* Checking /etc/modules"
  for module in $modules
  do
    [ -z "$(grep -v "^#" /etc/modules | grep $module)" ] && {
      echo "  - Adding module to module to /etc/modules"
      echo "$module" | sudo tee -a /etc/modules
      echo "  - Reboot required!"
      rebootRequired=true
    }
  done


  [ -n "$rebootRequired" ] && { echo ; echo "NOTE: Reboot required!" ; }

  return 0
}

#=====================================
# MAIN
#=====================================

if [ -n "$1" ]
then
  case $1 in
    --setup)
      echo "* Setup of requirements for $this_script"
      doSetup
      exit 0
    ;;
  esac
fi

#initRelays

totalCount=0
windowCount=0
windowCountMax=10

#--- set up symlinks
#--- if only one device is available, log to tmp/temperature
echo "* Setting up symlinks for aliases to ${temperatureFile}.DEVICEID"
for curDevice in $(getW1DevicePaths)
do
  curAlias=$(getAlias $curDevice)
  srcDevice=$(basename $curDevice)
  [ "$curAlias" != "$srcDevice" ] && {
    echo "  - $temperatureFile.$curAlias -> $temperatureFile.$(basename $curDevice)"
    ln -sf $temperatureFile.$(basename $curDevice) $temperatureFile.$curAlias
  }
done

echo "* Setting up symlink for ${temperatureFile} to the proper PID input" 
[ $(getW1DevicePaths | wc -l) -eq 0 ] && { echo "  - Error: could not find any 1wire devices" ; exit 1 ; }
[ $(getW1DevicePaths | wc -l) -eq 1 ] && {
  curDevice=$(basename $(getW1DevicePaths 2>/dev/null | head -1 ))
  echo "  - There is only one 1wire device available, symlinking $temperatureFile -> $curDevice" 
  ln -sf $curDevice $temperatureFile
}
[ $(getW1DevicePaths | wc -l) -ge 1 ] && {
  curDevice=$(basename $(getW1DevicePaths 2>/dev/null | head -1 ))
  echo "  - There are multiple 1wire device available, symlinking to the first found: $temperatureFile -> $curDevice" 
  [ -f $temperatureFile ] && rm $temperatureFile
  ln -sf $temperatureFile.$curDevice $temperatureFile
}

while true
do
  (( windowCount +=1 ))
  (( totalCount +=1 ))
  TS=$(date "+%Y%m%d_%H%M%S %s")

  for curDevice in $(getW1DevicePaths)
  do
    curAlias=$(getAlias $curDevice)
    curTemperature=$(getW1Temperature $curDevice)

    setTemperatureToFile $curTemperature $(basename $curDevice)

    printf "${TS} device: %s temperature: %-6.2f\n" $curDevice $curTemperature

    if [[ $windowCount -ge $windowCountMax || $totalCount -eq 1 ]]
    then
      printf "${TS} logging device: %s - %s temperature: %-6.2f\n" $curAlias $curDevice $curTemperature
      $this_dir/logging ${curAlias} $curTemperature
    fi

  done

  if [ $windowCount -ge $windowCountMax ]
  then
    windowCount=0
  fi

  sleep 0.1
done
